#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.21006.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GrayHills.ForensicToolkit.VideoInspector.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ForensicToolkitDB")]
	public partial class ForensicToolkitDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCase(Case instance);
    partial void UpdateCase(Case instance);
    partial void DeleteCase(Case instance);
    partial void InsertVideoInspection(VideoInspection instance);
    partial void UpdateVideoInspection(VideoInspection instance);
    partial void DeleteVideoInspection(VideoInspection instance);
    partial void InsertFrame(Frame instance);
    partial void UpdateFrame(Frame instance);
    partial void DeleteFrame(Frame instance);
    partial void InsertVideo(Video instance);
    partial void UpdateVideo(Video instance);
    partial void DeleteVideo(Video instance);
    #endregion
		
		public ForensicToolkitDBDataContext() : 
				base(global::GrayHills.ForensicToolkit.VideoInspector.Properties.Settings.Default.ForensicToolkitDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ForensicToolkitDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ForensicToolkitDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ForensicToolkitDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ForensicToolkitDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Case> Cases
		{
			get
			{
				return this.GetTable<Case>();
			}
		}
		
		public System.Data.Linq.Table<VideoInspection> VideoInspections
		{
			get
			{
				return this.GetTable<VideoInspection>();
			}
		}
		
		public System.Data.Linq.Table<Frame> Frames
		{
			get
			{
				return this.GetTable<Frame>();
			}
		}
		
		public System.Data.Linq.Table<Video> Videos
		{
			get
			{
				return this.GetTable<Video>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Case]")]
	public partial class Case : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Key;
		
		private string _Number;
		
		private string _Description;
		
		private bool _IsActive;
		
		private EntitySet<VideoInspection> _VideoInspections;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKeyChanging(System.Guid value);
    partial void OnKeyChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Case()
		{
			this._VideoInspections = new EntitySet<VideoInspection>(new Action<VideoInspection>(this.attach_VideoInspections), new Action<VideoInspection>(this.detach_VideoInspections));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Case_VideoInspection", Storage="_VideoInspections", ThisKey="Key", OtherKey="CaseKey")]
		public EntitySet<VideoInspection> VideoInspections
		{
			get
			{
				return this._VideoInspections;
			}
			set
			{
				this._VideoInspections.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VideoInspections(VideoInspection entity)
		{
			this.SendPropertyChanging();
			entity.Case = this;
		}
		
		private void detach_VideoInspections(VideoInspection entity)
		{
			this.SendPropertyChanging();
			entity.Case = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VideoInspection")]
	public partial class VideoInspection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Key;
		
		private System.Guid _CaseKey;
		
		private System.Nullable<System.DateTime> _Started;
		
		private System.Nullable<System.DateTime> _Ended;
		
		private EntitySet<Video> _Videos;
		
		private EntityRef<Case> _Case;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKeyChanging(System.Guid value);
    partial void OnKeyChanged();
    partial void OnCaseKeyChanging(System.Guid value);
    partial void OnCaseKeyChanged();
    partial void OnStartedChanging(System.Nullable<System.DateTime> value);
    partial void OnStartedChanged();
    partial void OnEndedChanging(System.Nullable<System.DateTime> value);
    partial void OnEndedChanged();
    #endregion
		
		public VideoInspection()
		{
			this._Videos = new EntitySet<Video>(new Action<Video>(this.attach_Videos), new Action<Video>(this.detach_Videos));
			this._Case = default(EntityRef<Case>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseKey", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CaseKey
		{
			get
			{
				return this._CaseKey;
			}
			set
			{
				if ((this._CaseKey != value))
				{
					if (this._Case.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCaseKeyChanging(value);
					this.SendPropertyChanging();
					this._CaseKey = value;
					this.SendPropertyChanged("CaseKey");
					this.OnCaseKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Started", DbType="DateTime")]
		public System.Nullable<System.DateTime> Started
		{
			get
			{
				return this._Started;
			}
			set
			{
				if ((this._Started != value))
				{
					this.OnStartedChanging(value);
					this.SendPropertyChanging();
					this._Started = value;
					this.SendPropertyChanged("Started");
					this.OnStartedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ended", DbType="DateTime")]
		public System.Nullable<System.DateTime> Ended
		{
			get
			{
				return this._Ended;
			}
			set
			{
				if ((this._Ended != value))
				{
					this.OnEndedChanging(value);
					this.SendPropertyChanging();
					this._Ended = value;
					this.SendPropertyChanged("Ended");
					this.OnEndedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VideoInspection_Video", Storage="_Videos", ThisKey="Key", OtherKey="VideoInspectionKey")]
		public EntitySet<Video> Videos
		{
			get
			{
				return this._Videos;
			}
			set
			{
				this._Videos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Case_VideoInspection", Storage="_Case", ThisKey="CaseKey", OtherKey="Key", IsForeignKey=true)]
		public Case Case
		{
			get
			{
				return this._Case.Entity;
			}
			set
			{
				Case previousValue = this._Case.Entity;
				if (((previousValue != value) 
							|| (this._Case.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Case.Entity = null;
						previousValue.VideoInspections.Remove(this);
					}
					this._Case.Entity = value;
					if ((value != null))
					{
						value.VideoInspections.Add(this);
						this._CaseKey = value.Key;
					}
					else
					{
						this._CaseKey = default(System.Guid);
					}
					this.SendPropertyChanged("Case");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Videos(Video entity)
		{
			this.SendPropertyChanging();
			entity.VideoInspection = this;
		}
		
		private void detach_Videos(Video entity)
		{
			this.SendPropertyChanging();
			entity.VideoInspection = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Frame")]
	public partial class Frame : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Key;
		
		private System.Guid _VideoKey;
		
		private System.TimeSpan _Time;
		
		private System.Data.Linq.Link<System.Data.Linq.Binary> _ImageFile;
		
		private EntityRef<Video> _Video;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKeyChanging(System.Guid value);
    partial void OnKeyChanged();
    partial void OnVideoKeyChanging(System.Guid value);
    partial void OnVideoKeyChanged();
    partial void OnTimeChanging(System.TimeSpan value);
    partial void OnTimeChanged();
    partial void OnImageFileChanging(System.Data.Linq.Binary value);
    partial void OnImageFileChanged();
    #endregion
		
		public Frame()
		{
			this._Video = default(EntityRef<Video>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoKey", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid VideoKey
		{
			get
			{
				return this._VideoKey;
			}
			set
			{
				if ((this._VideoKey != value))
				{
					if (this._Video.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVideoKeyChanging(value);
					this.SendPropertyChanging();
					this._VideoKey = value;
					this.SendPropertyChanged("VideoKey");
					this.OnVideoKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Time NOT NULL")]
		public System.TimeSpan Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageFile", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ImageFile
		{
			get
			{
				return this._ImageFile.Value;
			}
			set
			{
				if ((this._ImageFile.Value != value))
				{
					this.OnImageFileChanging(value);
					this.SendPropertyChanging();
					this._ImageFile.Value = value;
					this.SendPropertyChanged("ImageFile");
					this.OnImageFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Video_Frame", Storage="_Video", ThisKey="VideoKey", OtherKey="Key", IsForeignKey=true)]
		public Video Video
		{
			get
			{
				return this._Video.Entity;
			}
			set
			{
				Video previousValue = this._Video.Entity;
				if (((previousValue != value) 
							|| (this._Video.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Video.Entity = null;
						previousValue.Frames.Remove(this);
					}
					this._Video.Entity = value;
					if ((value != null))
					{
						value.Frames.Add(this);
						this._VideoKey = value.Key;
					}
					else
					{
						this._VideoKey = default(System.Guid);
					}
					this.SendPropertyChanged("Video");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Video")]
	public partial class Video : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Key;
		
		private System.Guid _VideoInspectionKey;
		
		private string _OriginalPath;
		
		private string _Filename;
		
		private System.Data.Linq.Binary _VideoFile;
		
		private System.Nullable<System.TimeSpan> _Length;
		
		private string _Checksum;
		
		private EntitySet<Frame> _Frames;
		
		private EntityRef<VideoInspection> _VideoInspection;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKeyChanging(System.Guid value);
    partial void OnKeyChanged();
    partial void OnVideoInspectionKeyChanging(System.Guid value);
    partial void OnVideoInspectionKeyChanged();
    partial void OnOriginalPathChanging(string value);
    partial void OnOriginalPathChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    partial void OnVideoFileChanging(System.Data.Linq.Binary value);
    partial void OnVideoFileChanged();
    partial void OnLengthChanging(System.Nullable<System.TimeSpan> value);
    partial void OnLengthChanged();
    partial void OnChecksumChanging(string value);
    partial void OnChecksumChanged();
    #endregion
		
		public Video()
		{
			this._Frames = new EntitySet<Frame>(new Action<Frame>(this.attach_Frames), new Action<Frame>(this.detach_Frames));
			this._VideoInspection = default(EntityRef<VideoInspection>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoInspectionKey", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid VideoInspectionKey
		{
			get
			{
				return this._VideoInspectionKey;
			}
			set
			{
				if ((this._VideoInspectionKey != value))
				{
					if (this._VideoInspection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVideoInspectionKeyChanging(value);
					this.SendPropertyChanging();
					this._VideoInspectionKey = value;
					this.SendPropertyChanged("VideoInspectionKey");
					this.OnVideoInspectionKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalPath", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string OriginalPath
		{
			get
			{
				return this._OriginalPath;
			}
			set
			{
				if ((this._OriginalPath != value))
				{
					this.OnOriginalPathChanging(value);
					this.SendPropertyChanging();
					this._OriginalPath = value;
					this.SendPropertyChanged("OriginalPath");
					this.OnOriginalPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filename", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this.OnFilenameChanging(value);
					this.SendPropertyChanging();
					this._Filename = value;
					this.SendPropertyChanged("Filename");
					this.OnFilenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoFile", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VideoFile
		{
			get
			{
				return this._VideoFile;
			}
			set
			{
				if ((this._VideoFile != value))
				{
					this.OnVideoFileChanging(value);
					this.SendPropertyChanging();
					this._VideoFile = value;
					this.SendPropertyChanged("VideoFile");
					this.OnVideoFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Time")]
		public System.Nullable<System.TimeSpan> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Checksum", DbType="Char(32)")]
		public string Checksum
		{
			get
			{
				return this._Checksum;
			}
			set
			{
				if ((this._Checksum != value))
				{
					this.OnChecksumChanging(value);
					this.SendPropertyChanging();
					this._Checksum = value;
					this.SendPropertyChanged("Checksum");
					this.OnChecksumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Video_Frame", Storage="_Frames", ThisKey="Key", OtherKey="VideoKey")]
		public EntitySet<Frame> Frames
		{
			get
			{
				return this._Frames;
			}
			set
			{
				this._Frames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VideoInspection_Video", Storage="_VideoInspection", ThisKey="VideoInspectionKey", OtherKey="Key", IsForeignKey=true)]
		public VideoInspection VideoInspection
		{
			get
			{
				return this._VideoInspection.Entity;
			}
			set
			{
				VideoInspection previousValue = this._VideoInspection.Entity;
				if (((previousValue != value) 
							|| (this._VideoInspection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VideoInspection.Entity = null;
						previousValue.Videos.Remove(this);
					}
					this._VideoInspection.Entity = value;
					if ((value != null))
					{
						value.Videos.Add(this);
						this._VideoInspectionKey = value.Key;
					}
					else
					{
						this._VideoInspectionKey = default(System.Guid);
					}
					this.SendPropertyChanged("VideoInspection");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Frames(Frame entity)
		{
			this.SendPropertyChanging();
			entity.Video = this;
		}
		
		private void detach_Frames(Frame entity)
		{
			this.SendPropertyChanging();
			entity.Video = null;
		}
	}
}
#pragma warning restore 1591
